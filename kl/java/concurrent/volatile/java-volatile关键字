# Java volatile作用
## 1.内存可见性
　　volatile是Java提供的一种轻量级的同步机制，在并发编程中，它也扮演着比较重要的角色。同synchronized相比（synchronized通常称为重量级锁），volatile更轻量级，相比使用synchronized所带来的庞大开销，倘若能恰当的合理的使用volatile，自然是美事一桩。
　　为了能比较清晰彻底的理解volatile，我们一步一步来分析。首先来看看如下代码
```
public class MemoryVisible {

    private boolean status;

    public MemoryVisible() {
        status = false;
    }

    /**
     * 状态切换为true
     */
    public void changeStatus(){
        status = true;
    }

    /**
     * 若状态为true，则running。
     */
    public void run(){
        while (true){
            System.out.println("status = " + status);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        MemoryVisible memoryVisible = new MemoryVisible();
        new Thread(new Runnable() {
            @Override
            public void run() {
                memoryVisible.changeStatus();
                while (true) {
                    System.out.println("set status = true");
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();
        memoryVisible.run();
    }
}
```
　　上面这个例子，在多线程环境里，假设线程A执行changeStatus()方法后,线程B运行run()方法，可以保证输出"running....."吗？
　　答案是NO!
　　这个结论会让人有些疑惑，可以理解。因为倘若在单线程模型里，先运行changeStatus方法，再执行run方法，自然是可以正确输出"running...."的；但是在多线程模型中，是没法做这种保证的。因为对于共享变量status来说，线程A的修改，对于线程B来讲，是"不可见"的。也就是说，线程B此时可能无法观测到status已被修改为true。那么什么是可见性呢？
　　所谓可见性，是指当一条线程修改了共享变量的值，新值对于其他线程来说是可以立即得知的。很显然，上述的例子中是没有办法做到内存可见性的。
　　为什么出现这种情况呢，我们需要先了解一下JMM（java内存模型）
　　java虚拟机有自己的内存模型（Java Memory Model，JMM），JMM可以屏蔽掉各种硬件和操作系统的内存访问差异，以实现让java程序在各种平台下都能达到一致的内存访问效果。
　　JMM决定一个线程对共享变量的写入何时对另一个线程可见，JMM定义了线程和主内存之间的抽象关系：共享变量存储在主内存(Main Memory)中，每个线程都有一个私有的本地内存（Local Memory），本地内存保存了被该线程使用到的主内存的副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量。这三者之间的交互关系如下
![](../../../img/volatile-java主内存和本地内存.png)
　　需要注意的是，JMM是个抽象的内存模型，所以所谓的本地内存，主内存都是抽象概念，并不一定就真实的对应cpu缓存和物理内存。当然如果是出于理解的目的，这样对应起来也无不可。
　　大概了解了JMM的简单定义后，问题就很容易理解了，对于普通的共享变量来讲，比如我们上文中的status，线程A将其修改为true这个动作发生在线程A的本地内存中，此时还未同步到主内存中去；而线程B缓存了status的初始值false，此时可能没有观测到status的值被修改了，所以就导致了上述的问题。那么这种共享变量在多线程模型中的不可见性如何解决呢？比较粗暴的方式自然就是加锁，但是此处使用synchronized或者Lock这些方式太重量级了，有点炮打蚊子的意思。比较合理的方式其实就是volatile
　　volatile具备两种特性，第一就是保证共享变量对所有线程的可见性。将一个共享变量声明为volatile后，会有以下效应：
　　1.当写一个volatile变量时，JMM会把该线程对应的本地内存中的变量强制刷新到主内存中去；
　　2.这个写会操作会导致其他线程中的缓存无效。
　　上面的例子只需将status声明为volatile，即可保证在线程A将其修改为true时，线程B可以立刻得知

```
可见性：一个线程对共享变量的修改能够及时的被其他线程看见
```

## 2.Java重排序
　　在介绍volatile的第二个作用前，先介绍[Java重排序](https://blog.csdn.net/lostinai/article/details/42740077)的概念。
　　现在的CPU一般采用流水线来执行指令。一个指令的执行被分成：取指、译码、访存、执行、写回、等若干个阶段。然后，多条指令可以同时存在于流水线中，同时被执行。
　　指令流水线并不是串行的，并不会因为一个耗时很长的指令在“执行”阶段呆很长时间，而导致后续的指令都卡在“执行”之前的阶段上。
　　重排序的目的是为了性能。

Example:
理想情况下：
过程A：cpu0—写入1—> bank0；
过程B：cpu0—写入2—> bank1；
如果bank0状态为busy, 则A过程需要等待
如果进行重排序，则直接可以先执行B过程。

### 数据依赖性
如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。

分为下面三种情况：

名称	示例	说明
写后读	a = 1; b = a;	写一个变量后再读这个位置
写后写	a = 1; a = 2;	写一个变量后再写这个变量
读后写	a = b; b = 1;	读一个变量后再写这个变量
上面三种情况，只要重排序两个操作的执行顺序，程序的执行结果将会被改变。

所以有数据依赖性的语句不能进行重排序。

### as-if-serial
　　as-if-serial 语义的意思指：不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变。编译器，runtime 和处理器都必须遵守 as-if-serial 语义。
　　编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作可能被编译器和处理器重排序。

Example:
```
double pi  = 3.14;        // Ⓐ
double r   = 1.0;         // Ⓑ
double area = pi * r * r; // Ⓒ
```
Ⓐ -> Ⓑ -> Ⓒ 按程序顺序的执行结果：area = 3.14
Ⓑ -> Ⓐ -> Ⓒ 按重排序后的执行结果：area = 3.14

as-if-serial语义把单线程程序保护了起来，遵守as-if-serial语义的编译器，写单线程的程序员有一个幻觉：单线程程序是按程序写的顺序来执行的。


### happens-before(could be read by) 规则
语义：如果A先发生于B，那么A所做的所有改变都能被B看到

遵循的规则

程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。
监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。
volatile变量规则：对一个volatile域的写，happens- before 于任意后续对这个volatile域的读。
传递性：如果A happens- before B，且B happens- before C，那么A happens- before C。
重排序对多线程的影响
```
class ReorderExample {
    int a = 0;
    boolean flag = false;

    public void writer() {
        a = 1;                   //1
        flag = true;             //2
    }

    Public void reader() {
        if (flag) {              //3
            int i =  a * a;      //4
            ……
        }
    }
}
```
　　flag为标志位，表示a有没有被写入，当A线程执行 writer 方法，B线程执行 reader 方法，线程B在执行4操作的时候，能否看到线程A对a的写入操作？
　　答案是: 不一定！
　　由于操作1和操作2没有数据依赖关系，编译器和处理器可以对这两个操作重排序。
　　如果操作1和操作2做了重排序，程序执行时，线程A首先写标记变量 flag，随后线程 B 读这个变量。由于条件判断为真，线程 B 将读取变量a。此时，变量 a 还根本没有被线程 A 写入，在这里多线程程序的语义被重排序破坏了！
。
## 3.volatile禁止进行指令重排序

　　当程序执行到 volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；
　　在进行指令优化时，不能将在对 volatile 变量访问的语句放在其后面执行，也不能把 volatile 变量后面的语句放到其前面执行。

Example:
```
//x、y为非volatile变量
//flag为volatile变量

x = 2;         //语句1
y = 0;         //语句2
flag = true;   //语句3
x = 4;         //语句4
y = -1;        //语句5
```
　　由于 flag 变量为 volatile 变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。
　　并且 volatile 关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。

　　非volatile类型的64位数值变量（long和double），JVM允许将其渡河写操作分解为两个32位的操作。    

volatile 能保证原子性吗？不能

Example:
```
public class Test {
    public volatile int inc = 0;
    public void increase() {
        inc++;
    }
    public static void main(String[] args) {
        final Test test = new Test();
        for(int i = 0; i < 10; i++) {
            new Thread() {
                public void run() {
                    for(int j = 0; j< 1000; j++)
                        test.increase();
                };
            }.start();
        }
        while(true) {
          Thread.sleep(1000);
          System.out.println(volatileInteger.inc);
        }
    }
}
```
　　这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。
　　原因在于，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。
