# 闭锁 CountDownLatch
## CountDownLatch的概念
CountDownLatch是一个同步工具类，用来协调多个线程之间的同步，或者说起到线程之间的通信（而不是用作互斥的作用）。

CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。使用一个计数器进行实现。计数器初始值为线程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为0时，表示所有的线程都已经完成了任务，然后在CountDownLatch上等待的线程就可以恢复执行任务。

## CountDownLatch的用法
#### CountDownLatch典型用法1：
某一线程在开始运行前等待n个线程执行完毕。将CountDownLatch的计数器初始化为n new CountDownLatch(n) ，每当一个任务线程执行完毕，就将计数器减1 countdownlatch.countDown()，当计数器的值变为0时，在CountDownLatch上 await() 的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。

![](../../../img/CountDownLatch.png)

#### CountDownLatch典型用法2：
实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的CountDownLatch(1)，将其计数器初始化为1，多个线程在开始执行任务前首先 coundownlatch.await()，当主线程调用 countDown() 时，计数器变为0，多个线程同时被唤醒。

## CountDownLatch的不足
CountDownLatch是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当CountDownLatch使用完毕后，它不能再次被使用。

# FutureTask
线程池的实现核心之一是FutureTask。在提交任务时，用户实现的Callable实例task会被包装为FutureTask实例ftask；提交后任务异步执行，无需用户关心；当用户需要时，再调用FutureTask#get()获取结果——或异常。

# 信号量 Semaphore
Semaphore中管理着一组虚拟的许可(permit),acquire方法将阻塞直到有许可可以获取，release将返回一个许可给信号量。计算信号量的一种简化形式是二值信号量，即初始值位1的信号量，也称作互斥体(mutex)，其具备“不可重入”的语义。


# 栅栏 Barrier
## CyclicBarrier
维护一个Callable和count，当调用了count次await时，执行Callable，并重置count，并恢复调用await的线程。作用是，设置一个栅栏，每次都得等所有程序到了栅栏处这些程序才能一起通过栅栏。
和CountDownLatch的区别：
* CountDownLatch的计数器只能使用一次。而CyclicBarrier的计数器可以使用reset() 方法重置。所以CyclicBarrier能处理更为复杂的业务场景，比如如果计算发生错误，可以重置计数器，并让线程们重新执行一次。
* CyclicBarrier还提供其他有用的方法，比如getNumberWaiting方法可以获得CyclicBarrier阻塞的线程数量。isBroken方法用来知道阻塞的线程是否被中断。比如以下代码执行完之后会返回true。

# Exchanger
一种两方栅栏，两方执行不对称操作时，可以使用Exchange来汇合并交换数据。


# 一个高效且可伸缩的结果缓存
## hashMap版本
首先我们定义一个Computable接口，该接口包含一个compute()方法，该方法是一个耗时很久的数值计算方法。Memoizer1是第一个版本的缓存，该版本使用hashMap来保存之前计算的结果，compute方法将首先检查需要的结果是否已经在缓存中，如果存在则返回之前计算的值，否则重新计算并把结果缓存在HashMap中，然后再返回。
```
interface Computable<A, V> {
    V compute(A arg) throws InterruptedException;//耗时计算
}

public class Memoizer1<A, V> implements Computable<A, V> {
    private final Map<A, V> cache = new HashMap<A, V>();
    private final Computable<A, V> c;

    public Memoizer1(Computable<A, V> c) {
        this.c = c;
    }

    public synchronized V compute(A arg) throws InterruptedException {
        V result = cache.get(arg);
        if (result == null) {
            result = c.compute(arg);
            cache.put(arg, result);
        }
        return result;
    }
}
```
HashMap不是线程安全的，因此要确保两个线程不会同时访问HashMap，Memoizer1采用了一种保守的方法，即对整个方法进行同步。这种方法能确保线程安全性，但会带来一个明显的可伸缩问题：每次只有一个线程可以执行compute。

## ConcurrentHashMap版本
我们可以用ConcurrentHashMap代替HashMap来改进Memoizer1中糟糕的并发行为，由于ConcurrentHashMap是线程安全的，因此在访问底层Map时就不需要进行同步，因此避免了对compute()方法进行同步带来的串行性：
```
public class Memoizer2 <A, V> implements Computable<A, V> {
    private final Map<A, V> cache = new ConcurrentHashMap<A, V>();
    private final Computable<A, V> c;

    public Memoizer2(Computable<A, V> c) {
        this.c = c;
    }

    public V compute(A arg) throws InterruptedException {
        V result = cache.get(arg);
        if (result == null) {
            result = c.compute(arg);
            cache.put(arg, result);
        }
        return result;
    }
}
```
但是这个版本的缓存还是有问题的，如果线程A启动了一个开销很大的计算，而其他线程并不知道这个线程正在进行，那么很可能会重复这个计算。

## FutureTask版本1
我们可以在map中存放Future对象而不是最终计算结果，Future对象相当于一个占位符，它告诉用户，结果正在计算中，如果想得到最终结果，请调用get()方法。Future的get()方法是一个阻塞方法，如果结果正在计算中，那么它会一直阻塞到结果计算完毕，然后返回；如果结果已经计算完毕，那么就直接返回。
```
public class Memoizer3<A, V> implements Computable<A, V> {
    private final Map<A, Future<V>> cache = new ConcurrentHashMap<A, Future<V>>();
    private final Computable<A, V> c;

    public Memoizer3(Computable<A, V> c) {
        this.c = c;
    }

    public V compute(final A arg) throws InterruptedException {
        Future<V> f = cache.get(arg);
        if (f == null) {
            Callable<V> eval = new Callable<V>() {
                public V call() throws InterruptedException {
                    return c.compute(arg);
                }
            };
            FutureTask<V> ft = new FutureTask<V>(eval);
            f = ft;
            cache.put(arg, ft);
            ft.run(); // call to c.compute happens here
        }
        try {
            return f.get();
        } catch (ExecutionException e) {
            cache.remove(arg);
        }
        return null;
    }
}
```
Memoizer3解决了上一个版本的问题，如果有其他线程在计算结果，那么新到的线程会一直等待这个结果被计算出来，但是他又一个缺陷，那就是仍然存在两个线程计算出相同值的漏洞。这是一个典型的"先检查再执行"引起的竞态条件错误，我们先检查map中是否存在结果，如果不存在，那就计算新值，这并不是一个原子操作，所以两个线程仍有可能在同一时间内调用compute来计算相同的值。

## FutureTask版本2
Memoizer3存在这个问题的原因是，复合操作"若没有则添加"不具有原子性，我们可以改用ConcurrentMap中的原子方法putIfAbsent，避免了Memoizer3的漏洞。
```
public class Memoizer <A, V> implements Computable<A, V> {
    private final ConcurrentMap<A, Future<V>> cache
            = new ConcurrentHashMap<A, Future<V>>();
    private final Computable<A, V> c;

    public Memoizer(Computable<A, V> c) {
        this.c = c;
    }

    public V compute(final A arg) throws InterruptedException {
        while (true) {
            Future<V> f = cache.get(arg);
            if (f == null) {
                Callable<V> eval = new Callable<V>() {
                    public V call() throws InterruptedException {
                        return c.compute(arg);
                    }
                };
                FutureTask<V> ft = new FutureTask<V>(eval);
                f = cache.putIfAbsent(arg, ft);
                if (f == null) {
                    f = ft;
                    ft.run();
                }
            }
            try {
                return f.get();
            } catch (CancellationException e) {
                cache.remove(arg, f);
            } catch (ExecutionException e) {
                throw LaunderThrowable.launderThrowable(e.getCause());
            }
        }
    }
}
```
当缓存对象是Future而不是值的时候，将导致缓存污染问题，因为某个计算可能被取消或失败，当出现这种情况时，我们应该把对象从map中移除，然后再重新计算一遍。这个缓存系统的使用十分简单，只需传入一个Computable对象即可构造缓存，要得到计算结果，调用compute()方法即可，该方法会把计算过的结果缓存起来。

## 总结
相较于第一个版本，最终版本在性能上有了很大提升，ConcurrentHashMap的使用避免了整个方法加锁；FutureTask的使用使计算异步化，同时通过一个Future对象告诉当前线程计算正在进行中，避免了大量重复计算。
