# ConcurrentHashMap
## 分段锁 Lock Striping

Hashtable和synchronizedMap使用的则是独占锁。

## 迭代器弱一致性 Weakly Consistent
&emsp;&emsp;可以忍受迭代时对容器进行修改，并可以（但是不保证）在迭代器被构造后将修改操作反映给容器。其结果是某些方法如size，isEmpty得到的不是准确值，其语义被减弱了，相反，get，put，containsKey，remove等操作的性能被优化了。


# CopyOnWriteArrayList
## 复制代替修改
&emsp;&emsp;底层容器是个不可变的对象，也就是每次修改元素，都要创建并重新发布一个新的容器副本。显然它是线程安全，每次修改都复制底层数组听起来需要一定的开销，仅当迭代操作远多于修改操作时，才应该使用。监听器列表就是一个很好的示例。



# LinkedBlockQueue
&emsp;&emsp;使用LinkedList实现的FIFO队列。

# ArrayBlockingQueue
&emsp;&emsp;使用ArrayList实现的FIFO队列。

# PriorityBlokingQueue
&emsp;&emsp;优先级最高的元素先出队。

# SynchronousQeueu
&emsp;&emsp;维护一组线程，这些线程直接将入队的元素交给在等待的线程，降低了将数据从生产者移动到消费者的延迟。

# BlockingDeque
&emsp;&emsp;双端BlockingQueue，当一个线程获取的一个双端队列为空时，它会从另一个双端队列的尾部获取元素。
